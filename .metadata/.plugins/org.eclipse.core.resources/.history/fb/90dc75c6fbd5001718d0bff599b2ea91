

/**
 * BowlingGame Score calculator
 *
 * @author CDT414 Student: dkc17001
 * @version 1.0
 * @date 2016-11-24
 */
public class BowlingGame {

	String game;

	/**
	 * getScore method returns a score of current Bowling game or -1 if error
	 * 
	 * @return Integer value of Bowling score, in case of error return value is
	 *         -1
	 */
	

	public int getScore() {
		int s1 = 0;
		int s2 = 0;
		int score = 0;
		
		int strikeCount = 1;
		int spareCount = 1;

		if (verifyStringFormat(game) || verifyLastSpareStringFormat(game) || verifyLastStrikeStringFormat(game)){
			
		
		String array = game.replace("]", ".");
		array = array.replace("[", "");
		String[] frames = array.split("\\.");
	 
	
			for (int i = 0; i < 10; i++) {
				// open
				if (open(frames[i])) {
					if ( frames.length == 11){
						return -1;
					}
					String[] arr = frames[i].split(",");
					s1 = Integer.parseInt(arr[0]);
					s2 = Integer.parseInt(arr[1]);
					score = score + s2 + s1;
					
				}
				// Strike
				if (strike(frames[i])) {
					int br = i + 1;
						if (i == 9){
							if ( frames.length > 9){
								return -1;
							}
							
							if (open(frames[br])) {
								String[] arr = frames[br].split(",");
								s1 = Integer.parseInt(arr[0]);
								s2 = Integer.parseInt(arr[1]);
									score = score + 10 + s1 + s2;
									return score;
							}else{
									strikeCount = strikeCount + 1;
							
									String[] arr = frames[br].split(",");
									s1 = Integer.parseInt(arr[0]);
									s2 = Integer.parseInt(arr[1]);
									score = score + strikeCount * 10 + s1;
									score = score + 10 + s1 + s2;
									return score;
								}
							
						}
						// Open after Strike
						if (open(frames[br])) {
							String[] arr = frames[br].split(",");
							s1 = Integer.parseInt(arr[0]);
							s2 = Integer.parseInt(arr[1]);
							if (strikeCount > 1) {
								score = score + strikeCount * 10 + s1;
								score = score + 10 + s1 + s2;
								i = br - 1;
								strikeCount = 1;
								
							} else {
								score = score + 10 + s1 + s2;
								
							}
							// Strike after Strike
						} else if (strike(frames[br])) {
							strikeCount = strikeCount + 1;
							// Perfect!
							if (strikeCount == 10) {
								String[] arr = frames[br+1].split(",");
								s1 = Integer.parseInt(arr[0]);
								s2 = Integer.parseInt(arr[1]);
								if (s1 == 10 && s2==10){
									score = 300;
									return score;
								}else{
									
								}
								
							} else if (br == 9) {
								String[] arr = frames[br+1].split(",");
								s1 = Integer.parseInt(arr[0]);
								s2 = Integer.parseInt(arr[1]);
								score = score + strikeCount * 10 + s1;
								score = score + 10 + s1 + s2;
								return score;
							}
							// Strike next Spare
						} else if (spare(frames[br])) {
							String[] arr = frames[br].split(",");
							s1 = Integer.parseInt(arr[0]);
							s2 = Integer.parseInt(arr[1]);
							if (strikeCount > 1) {
								score = score + strikeCount * 10 + s1;
								score = score + 10 + s1 + s2;
								i = br - 1;
								strikeCount = 1;
								
							} else {
								score = score + 10 + s1 + s2;
							
							}
						}
					
				}
				// Spare
				if (spare(frames[i])) {
					int br =i + 1;
						if(i == 9 ){
							if ( frames.length == 10){
								return -1;
							}
							s1 = Integer.parseInt(frames[br]);
							score = score + 10 + s1;
							return score;
						}
						
						// Spare next Open
						if (open(frames[br])) {
							String[] arr = frames[br].split(",");
							s1 = Integer.parseInt(arr[0]);
							s2 = Integer.parseInt(arr[1]);
							
								score = score + 10 + s1;
							
							// Spare next Spare
						} else if (spare(frames[br])) {
						
							
							String[] arr = frames[br].split(",");
							s1 = Integer.parseInt(arr[0]);
							s2 = Integer.parseInt(arr[1]);
							score = score + 10 + s1;
							if (br == 9){
								s1 = Integer.parseInt(frames[br+1]);
								score = score + 10 + s1;
								return score;
								
							}
							
							// Spare next Strike
						} else if (strike(frames[br])) {
							String[] arr = frames[br].split(",");
							s1 = Integer.parseInt(arr[0]);
							s2 = Integer.parseInt(arr[1]);
							
								score = score + 10 + s1;
								
							
						}


				}

			}
			return score;
			
		
		
		}
			return (-1);
		
		
	}

	public boolean open(String a) {
		String[] arr = a.split(",");
		int s1 = Integer.parseInt(arr[0]);
		int s2 = Integer.parseInt(arr[1]);
		int result = s2 + s1;
		if (result < 10) {
			return true;
		} else {
			return false;
		}
	}

	public boolean strike(String a) {
		String[] arr = a.split(",");
		int s1 = Integer.parseInt(arr[0]);
		int s2 = Integer.parseInt(arr[1]);
		if (s1 == 10 && s2 == 0) {
			return true;
		}
		return false;
	}

	public boolean spare(String a) {
		String[] arr = a.split(",");
		int s1 = Integer.parseInt(arr[0]);
		int s2 = Integer.parseInt(arr[1]);
		int result = s2 + s1;
		if (result == 10 ){
			if (s1 < 10 && s2 < 10){
				return true;
			}
			return false;
		}else{ 
			return false;
		}

	}
	public boolean verifyStringFormat(String game) {
		return game.matches("(\\[([0-9]|10),([0-9]|10)\\]){10}");
	}
	
	public boolean verifyLastStrikeStringFormat(String game) {
		return game.matches("(\\[([0-9]|10),([0-9]|10)\\]){10}\\[([0-9]|10),([0-9]|10)\\]");
	}
	
	public boolean verifyLastSpareStringFormat(String game) {
		return game.matches("(\\[([0-9]|10),([0-9]|10)\\]){10}\\[([0-9]|10)\\]");
	}
	/**
	 * BowlingGame Score calculator constructor which require string as input
	 * 
	 * @param game
	 *            Expected format ""
	 * 
	 */
	public BowlingGame(String game) {
		this.game = game;
	}

}
